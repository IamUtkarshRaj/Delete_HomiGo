{"ast":null,"code":"// Compatibility matching service\nclass CompatibilityMatcher {\n  /**\n   * Calculate compatibility percentage between user and listing\n   * @param {Object} userPreferences - User's preferences and profile data\n   * @param {Object} listing - Listing data from backend\n   * @returns {number} - Compatibility percentage (0-100)\n   */\n  static calculateCompatibility(userPreferences, listing) {\n    if (!userPreferences || !listing) return 0;\n    let totalScore = 0;\n    let totalWeight = 0;\n\n    // Gender compatibility (Weight: 25)\n    const genderScore = this.calculateGenderCompatibility(userPreferences, listing);\n    totalScore += genderScore * 25;\n    totalWeight += 25;\n\n    // Budget compatibility (Weight: 20)\n    const budgetScore = this.calculateBudgetCompatibility(userPreferences, listing);\n    totalScore += budgetScore * 20;\n    totalWeight += 20;\n\n    // Amenities compatibility (Weight: 15)\n    const amenitiesScore = this.calculateAmenitiesCompatibility(userPreferences, listing);\n    totalScore += amenitiesScore * 15;\n    totalWeight += 15;\n\n    // Room type/sharing compatibility (Weight: 15)\n    const roomTypeScore = this.calculateRoomTypeCompatibility(userPreferences, listing);\n    totalScore += roomTypeScore * 15;\n    totalWeight += 15;\n\n    // Location/Distance compatibility (Weight: 10)\n    const locationScore = this.calculateLocationCompatibility(userPreferences, listing);\n    totalScore += locationScore * 10;\n    totalWeight += 10;\n\n    // Lifestyle compatibility (Weight: 10)\n    const lifestyleScore = this.calculateLifestyleCompatibility(userPreferences, listing);\n    totalScore += lifestyleScore * 10;\n    totalWeight += 10;\n\n    // Rating bonus (Weight: 5)\n    const ratingScore = this.calculateRatingScore(listing);\n    totalScore += ratingScore * 5;\n    totalWeight += 5;\n    return totalWeight > 0 ? Math.round(totalScore / totalWeight) : 0;\n  }\n\n  /**\n   * Calculate gender compatibility\n   */\n  static calculateGenderCompatibility(userPreferences, listing) {\n    var _userPreferences$gend, _listing$preferences, _listing$preferences$, _listing$gender;\n    const userGender = (_userPreferences$gend = userPreferences.gender) === null || _userPreferences$gend === void 0 ? void 0 : _userPreferences$gend.toLowerCase();\n    const listingGender = ((_listing$preferences = listing.preferences) === null || _listing$preferences === void 0 ? void 0 : (_listing$preferences$ = _listing$preferences.gender) === null || _listing$preferences$ === void 0 ? void 0 : _listing$preferences$.toLowerCase()) || ((_listing$gender = listing.gender) === null || _listing$gender === void 0 ? void 0 : _listing$gender.toLowerCase());\n    if (!userGender || !listingGender) return 0.5;\n    if (listingGender === 'any' || userGender === 'any') return 1;\n    if (userGender === listingGender) return 1;\n    return 0;\n  }\n\n  /**\n   * Calculate budget compatibility\n   */\n  static calculateBudgetCompatibility(userPreferences, listing) {\n    var _userPreferences$budg, _userPreferences$budg2;\n    const userMinBudget = ((_userPreferences$budg = userPreferences.budget) === null || _userPreferences$budg === void 0 ? void 0 : _userPreferences$budg.min) || 0;\n    const userMaxBudget = ((_userPreferences$budg2 = userPreferences.budget) === null || _userPreferences$budg2 === void 0 ? void 0 : _userPreferences$budg2.max) || Infinity;\n    const listingPrice = listing.price || 0;\n    if (listingPrice >= userMinBudget && listingPrice <= userMaxBudget) {\n      // Perfect budget match\n      return 1;\n    } else if (listingPrice < userMinBudget) {\n      // Below minimum budget (might be too cheap/suspicious)\n      const ratio = listingPrice / userMinBudget;\n      return Math.max(0, ratio);\n    } else {\n      // Above maximum budget\n      const overBudget = listingPrice - userMaxBudget;\n      const tolerance = userMaxBudget * 0.2; // 20% tolerance\n      if (overBudget <= tolerance) {\n        return Math.max(0, 1 - overBudget / tolerance);\n      }\n      return 0;\n    }\n  }\n\n  /**\n   * Calculate amenities compatibility\n   */\n  static calculateAmenitiesCompatibility(userPreferences, listing) {\n    const preferredAmenities = userPreferences.preferredAmenities || [];\n    const listingAmenities = listing.amenities || [];\n    if (preferredAmenities.length === 0) return 0.8; // Default score if no preferences\n\n    const matchingAmenities = preferredAmenities.filter(amenity => listingAmenities.some(listingAmenity => listingAmenity.toLowerCase().includes(amenity.toLowerCase())));\n    return matchingAmenities.length / preferredAmenities.length;\n  }\n\n  /**\n   * Calculate room type compatibility\n   */\n  static calculateRoomTypeCompatibility(userPreferences, listing) {\n    var _userPreferences$pref;\n    const preferredRoommates = (_userPreferences$pref = userPreferences.preferences) === null || _userPreferences$pref === void 0 ? void 0 : _userPreferences$pref.roommates;\n    const listingOccupancy = listing.occupancy || listing.roomType;\n    if (!preferredRoommates || !listingOccupancy) return 0.7;\n\n    // Extract number from occupancy string (e.g., \"2 sharing\" -> 2)\n    const occupancyMatch = listingOccupancy.toString().match(/(\\d+)/);\n    const listingRoommates = occupancyMatch ? parseInt(occupancyMatch[1]) : 1;\n    if (listingOccupancy.toLowerCase().includes('studio') || listingOccupancy.toLowerCase().includes('single')) {\n      return preferredRoommates === 0 ? 1 : 0.3;\n    }\n    const difference = Math.abs(preferredRoommates - listingRoommates);\n    if (difference === 0) return 1;\n    if (difference === 1) return 0.7;\n    if (difference === 2) return 0.4;\n    return 0.1;\n  }\n\n  /**\n   * Calculate location compatibility based on distance\n   */\n  static calculateLocationCompatibility(userPreferences, listing) {\n    const distance = listing.distance || 0;\n    const maxDistance = userPreferences.maxDistance || 10; // Default 10km\n\n    if (distance <= 1) return 1;\n    if (distance <= 2) return 0.9;\n    if (distance <= 3) return 0.8;\n    if (distance <= 5) return 0.6;\n    if (distance <= maxDistance) return 0.4;\n    return 0.1;\n  }\n\n  /**\n   * Calculate lifestyle compatibility\n   */\n  static calculateLifestyleCompatibility(userPreferences, listing) {\n    var _userPreferences$pref2;\n    const userLifestyle = ((_userPreferences$pref2 = userPreferences.preferences) === null || _userPreferences$pref2 === void 0 ? void 0 : _userPreferences$pref2.lifestyle) || {};\n    const listingPreferences = listing.preferences || {};\n    let matches = 0;\n    let total = 0;\n\n    // Smoking compatibility\n    if (userLifestyle.smoking && listingPreferences.smoking !== undefined) {\n      const userSmoking = userLifestyle.smoking.toLowerCase();\n      const listingSmoking = listingPreferences.smoking;\n      if (userSmoking === 'yes' && listingSmoking || userSmoking === 'no' && !listingSmoking || userSmoking === 'no preference') {\n        matches++;\n      }\n      total++;\n    }\n\n    // Food preferences\n    if (userLifestyle.foodPreferences && listingPreferences.foodPreferences) {\n      const userFood = userLifestyle.foodPreferences.toLowerCase();\n      const listingFood = listingPreferences.foodPreferences.toLowerCase();\n      if (userFood === listingFood || userFood === 'any' || listingFood === 'any') {\n        matches++;\n      }\n      total++;\n    }\n    return total > 0 ? matches / total : 0.7;\n  }\n\n  /**\n   * Calculate rating score bonus\n   */\n  static calculateRatingScore(listing) {\n    const rating = listing.rating || 0;\n    return Math.min(rating / 5, 1); // Normalize to 0-1\n  }\n\n  /**\n   * Sort listings by compatibility score\n   */\n  static sortByCompatibility(listings, userPreferences) {\n    return listings.map(listing => ({\n      ...listing,\n      compatibility: this.calculateCompatibility(userPreferences, listing)\n    })).sort((a, b) => b.compatibility - a.compatibility);\n  }\n\n  /**\n   * Get compatibility color based on score\n   */\n  static getCompatibilityColor(score) {\n    if (score >= 90) return '#22c55e'; // Green\n    if (score >= 80) return '#84cc16'; // Light green\n    if (score >= 70) return '#eab308'; // Yellow\n    if (score >= 60) return '#f97316'; // Orange\n    return '#ef4444'; // Red\n  }\n\n  /**\n   * Get compatibility label based on score\n   */\n  static getCompatibilityLabel(score) {\n    if (score >= 90) return 'Excellent Match';\n    if (score >= 80) return 'Great Match';\n    if (score >= 70) return 'Good Match';\n    if (score >= 60) return 'Fair Match';\n    return 'Poor Match';\n  }\n}\nexport default CompatibilityMatcher;","map":{"version":3,"names":["CompatibilityMatcher","calculateCompatibility","userPreferences","listing","totalScore","totalWeight","genderScore","calculateGenderCompatibility","budgetScore","calculateBudgetCompatibility","amenitiesScore","calculateAmenitiesCompatibility","roomTypeScore","calculateRoomTypeCompatibility","locationScore","calculateLocationCompatibility","lifestyleScore","calculateLifestyleCompatibility","ratingScore","calculateRatingScore","Math","round","_userPreferences$gend","_listing$preferences","_listing$preferences$","_listing$gender","userGender","gender","toLowerCase","listingGender","preferences","_userPreferences$budg","_userPreferences$budg2","userMinBudget","budget","min","userMaxBudget","max","Infinity","listingPrice","price","ratio","overBudget","tolerance","preferredAmenities","listingAmenities","amenities","length","matchingAmenities","filter","amenity","some","listingAmenity","includes","_userPreferences$pref","preferredRoommates","roommates","listingOccupancy","occupancy","roomType","occupancyMatch","toString","match","listingRoommates","parseInt","difference","abs","distance","maxDistance","_userPreferences$pref2","userLifestyle","lifestyle","listingPreferences","matches","total","smoking","undefined","userSmoking","listingSmoking","foodPreferences","userFood","listingFood","rating","sortByCompatibility","listings","map","compatibility","sort","a","b","getCompatibilityColor","score","getCompatibilityLabel"],"sources":["/Users/avarn/Desktop/HomiGo project/frontend/src/services/compatibilityService.js"],"sourcesContent":["// Compatibility matching service\nclass CompatibilityMatcher {\n  \n  /**\n   * Calculate compatibility percentage between user and listing\n   * @param {Object} userPreferences - User's preferences and profile data\n   * @param {Object} listing - Listing data from backend\n   * @returns {number} - Compatibility percentage (0-100)\n   */\n  static calculateCompatibility(userPreferences, listing) {\n    if (!userPreferences || !listing) return 0;\n\n    let totalScore = 0;\n    let totalWeight = 0;\n\n    // Gender compatibility (Weight: 25)\n    const genderScore = this.calculateGenderCompatibility(userPreferences, listing);\n    totalScore += genderScore * 25;\n    totalWeight += 25;\n\n    // Budget compatibility (Weight: 20)\n    const budgetScore = this.calculateBudgetCompatibility(userPreferences, listing);\n    totalScore += budgetScore * 20;\n    totalWeight += 20;\n\n    // Amenities compatibility (Weight: 15)\n    const amenitiesScore = this.calculateAmenitiesCompatibility(userPreferences, listing);\n    totalScore += amenitiesScore * 15;\n    totalWeight += 15;\n\n    // Room type/sharing compatibility (Weight: 15)\n    const roomTypeScore = this.calculateRoomTypeCompatibility(userPreferences, listing);\n    totalScore += roomTypeScore * 15;\n    totalWeight += 15;\n\n    // Location/Distance compatibility (Weight: 10)\n    const locationScore = this.calculateLocationCompatibility(userPreferences, listing);\n    totalScore += locationScore * 10;\n    totalWeight += 10;\n\n    // Lifestyle compatibility (Weight: 10)\n    const lifestyleScore = this.calculateLifestyleCompatibility(userPreferences, listing);\n    totalScore += lifestyleScore * 10;\n    totalWeight += 10;\n\n    // Rating bonus (Weight: 5)\n    const ratingScore = this.calculateRatingScore(listing);\n    totalScore += ratingScore * 5;\n    totalWeight += 5;\n\n    return totalWeight > 0 ? Math.round(totalScore / totalWeight) : 0;\n  }\n\n  /**\n   * Calculate gender compatibility\n   */\n  static calculateGenderCompatibility(userPreferences, listing) {\n    const userGender = userPreferences.gender?.toLowerCase();\n    const listingGender = listing.preferences?.gender?.toLowerCase() || listing.gender?.toLowerCase();\n\n    if (!userGender || !listingGender) return 0.5;\n    \n    if (listingGender === 'any' || userGender === 'any') return 1;\n    if (userGender === listingGender) return 1;\n    \n    return 0;\n  }\n\n  /**\n   * Calculate budget compatibility\n   */\n  static calculateBudgetCompatibility(userPreferences, listing) {\n    const userMinBudget = userPreferences.budget?.min || 0;\n    const userMaxBudget = userPreferences.budget?.max || Infinity;\n    const listingPrice = listing.price || 0;\n\n    if (listingPrice >= userMinBudget && listingPrice <= userMaxBudget) {\n      // Perfect budget match\n      return 1;\n    } else if (listingPrice < userMinBudget) {\n      // Below minimum budget (might be too cheap/suspicious)\n      const ratio = listingPrice / userMinBudget;\n      return Math.max(0, ratio);\n    } else {\n      // Above maximum budget\n      const overBudget = listingPrice - userMaxBudget;\n      const tolerance = userMaxBudget * 0.2; // 20% tolerance\n      if (overBudget <= tolerance) {\n        return Math.max(0, 1 - (overBudget / tolerance));\n      }\n      return 0;\n    }\n  }\n\n  /**\n   * Calculate amenities compatibility\n   */\n  static calculateAmenitiesCompatibility(userPreferences, listing) {\n    const preferredAmenities = userPreferences.preferredAmenities || [];\n    const listingAmenities = listing.amenities || [];\n\n    if (preferredAmenities.length === 0) return 0.8; // Default score if no preferences\n\n    const matchingAmenities = preferredAmenities.filter(amenity => \n      listingAmenities.some(listingAmenity => \n        listingAmenity.toLowerCase().includes(amenity.toLowerCase())\n      )\n    );\n\n    return matchingAmenities.length / preferredAmenities.length;\n  }\n\n  /**\n   * Calculate room type compatibility\n   */\n  static calculateRoomTypeCompatibility(userPreferences, listing) {\n    const preferredRoommates = userPreferences.preferences?.roommates;\n    const listingOccupancy = listing.occupancy || listing.roomType;\n\n    if (!preferredRoommates || !listingOccupancy) return 0.7;\n\n    // Extract number from occupancy string (e.g., \"2 sharing\" -> 2)\n    const occupancyMatch = listingOccupancy.toString().match(/(\\d+)/);\n    const listingRoommates = occupancyMatch ? parseInt(occupancyMatch[1]) : 1;\n\n    if (listingOccupancy.toLowerCase().includes('studio') || listingOccupancy.toLowerCase().includes('single')) {\n      return preferredRoommates === 0 ? 1 : 0.3;\n    }\n\n    const difference = Math.abs(preferredRoommates - listingRoommates);\n    if (difference === 0) return 1;\n    if (difference === 1) return 0.7;\n    if (difference === 2) return 0.4;\n    return 0.1;\n  }\n\n  /**\n   * Calculate location compatibility based on distance\n   */\n  static calculateLocationCompatibility(userPreferences, listing) {\n    const distance = listing.distance || 0;\n    const maxDistance = userPreferences.maxDistance || 10; // Default 10km\n\n    if (distance <= 1) return 1;\n    if (distance <= 2) return 0.9;\n    if (distance <= 3) return 0.8;\n    if (distance <= 5) return 0.6;\n    if (distance <= maxDistance) return 0.4;\n    return 0.1;\n  }\n\n  /**\n   * Calculate lifestyle compatibility\n   */\n  static calculateLifestyleCompatibility(userPreferences, listing) {\n    const userLifestyle = userPreferences.preferences?.lifestyle || {};\n    const listingPreferences = listing.preferences || {};\n\n    let matches = 0;\n    let total = 0;\n\n    // Smoking compatibility\n    if (userLifestyle.smoking && listingPreferences.smoking !== undefined) {\n      const userSmoking = userLifestyle.smoking.toLowerCase();\n      const listingSmoking = listingPreferences.smoking;\n      \n      if ((userSmoking === 'yes' && listingSmoking) || \n          (userSmoking === 'no' && !listingSmoking) ||\n          userSmoking === 'no preference') {\n        matches++;\n      }\n      total++;\n    }\n\n    // Food preferences\n    if (userLifestyle.foodPreferences && listingPreferences.foodPreferences) {\n      const userFood = userLifestyle.foodPreferences.toLowerCase();\n      const listingFood = listingPreferences.foodPreferences.toLowerCase();\n      \n      if (userFood === listingFood || userFood === 'any' || listingFood === 'any') {\n        matches++;\n      }\n      total++;\n    }\n\n    return total > 0 ? matches / total : 0.7;\n  }\n\n  /**\n   * Calculate rating score bonus\n   */\n  static calculateRatingScore(listing) {\n    const rating = listing.rating || 0;\n    return Math.min(rating / 5, 1); // Normalize to 0-1\n  }\n\n  /**\n   * Sort listings by compatibility score\n   */\n  static sortByCompatibility(listings, userPreferences) {\n    return listings.map(listing => ({\n      ...listing,\n      compatibility: this.calculateCompatibility(userPreferences, listing)\n    })).sort((a, b) => b.compatibility - a.compatibility);\n  }\n\n  /**\n   * Get compatibility color based on score\n   */\n  static getCompatibilityColor(score) {\n    if (score >= 90) return '#22c55e'; // Green\n    if (score >= 80) return '#84cc16'; // Light green\n    if (score >= 70) return '#eab308'; // Yellow\n    if (score >= 60) return '#f97316'; // Orange\n    return '#ef4444'; // Red\n  }\n\n  /**\n   * Get compatibility label based on score\n   */\n  static getCompatibilityLabel(score) {\n    if (score >= 90) return 'Excellent Match';\n    if (score >= 80) return 'Great Match';\n    if (score >= 70) return 'Good Match';\n    if (score >= 60) return 'Fair Match';\n    return 'Poor Match';\n  }\n}\n\nexport default CompatibilityMatcher;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}