{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:5001/api',\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  // If the error status is 401 and there is no originalRequest._retry flag,\n  // it means the token has expired and we need to refresh it\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      const response = await axios.post('http://localhost:5000/api/auth/refresh-token', {\n        refreshToken\n      }, {\n        withCredentials: true\n      });\n      const {\n        accessToken\n      } = response.data.data;\n      localStorage.setItem('token', accessToken);\n\n      // Retry the original request with the new token\n      originalRequest.headers.Authorization = `Bearer ${accessToken}`;\n      return api(originalRequest);\n    } catch (error) {\n      // If refresh token is also expired, redirect to login\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      window.location.href = '/login';\n      return Promise.reject(error);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","post","accessToken","data","setItem","removeItem","window","location","href"],"sources":["/Users/avarn/Desktop/HomiGo project/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:5001/api',\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, (error) => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    // If the error status is 401 and there is no originalRequest._retry flag,\n    // it means the token has expired and we need to refresh it\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      try {\n        const refreshToken = localStorage.getItem('refreshToken');\n        const response = await axios.post('http://localhost:5000/api/auth/refresh-token', \n          { refreshToken },\n          { withCredentials: true }\n        );\n\n        const { accessToken } = response.data.data;\n        localStorage.setItem('token', accessToken);\n\n        // Retry the original request with the new token\n        originalRequest.headers.Authorization = `Bearer ${accessToken}`;\n        return api(originalRequest);\n      } catch (error) {\n        // If refresh token is also expired, redirect to login\n        localStorage.removeItem('token');\n        localStorage.removeItem('refreshToken');\n        window.location.href = '/login';\n        return Promise.reject(error);\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EACpCC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EAAGK,KAAK,IAAK;EACZ,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACAb,GAAG,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EACf,MAAMI,eAAe,GAAGJ,KAAK,CAACL,MAAM;;EAEpC;EACA;EACA,IAAIK,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC5DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAE7B,IAAI;MACF,MAAMC,YAAY,GAAGV,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MACzD,MAAMK,QAAQ,GAAG,MAAMjB,KAAK,CAACsB,IAAI,CAAC,8CAA8C,EAC9E;QAAED;MAAa,CAAC,EAChB;QAAEjB,eAAe,EAAE;MAAK,CAC1B,CAAC;MAED,MAAM;QAAEmB;MAAY,CAAC,GAAGN,QAAQ,CAACO,IAAI,CAACA,IAAI;MAC1Cb,YAAY,CAACc,OAAO,CAAC,OAAO,EAAEF,WAAW,CAAC;;MAE1C;MACAL,eAAe,CAACb,OAAO,CAACQ,aAAa,GAAG,UAAUU,WAAW,EAAE;MAC/D,OAAOtB,GAAG,CAACiB,eAAe,CAAC;IAC7B,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACd;MACAH,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;MAChCf,YAAY,CAACe,UAAU,CAAC,cAAc,CAAC;MACvCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MAC/B,OAAOd,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;IAC9B;EACF;EAEA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeb,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}