{"ast":null,"code":"import api from './api';\nconst authService = {\n  // Utility: get current user type (role)\n  getUserType: () => {\n    try {\n      const stored = localStorage.getItem('user');\n      if (stored) {\n        const user = JSON.parse(stored);\n        return user.role || null;\n      }\n    } catch (e) {}\n    return null;\n  },\n  // Utility: check if current user is owner\n  isOwner: () => {\n    try {\n      const stored = localStorage.getItem('user');\n      if (stored) {\n        const user = JSON.parse(stored);\n        return user.role === 'owner';\n      }\n    } catch (e) {}\n    return false;\n  },\n  getCurrentUser: async () => {\n    try {\n      const response = await api.get('/auth/me');\n      return {\n        success: true,\n        data: response.data.data\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch user data'\n      };\n    }\n  },\n  updateProfile: async userData => {\n    try {\n      const response = await api.put('/users/profile', userData);\n      return {\n        success: true,\n        data: response.data.data\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to update profile'\n      };\n    }\n  },\n  // Register a new user\n  register: async userData => {\n    try {\n      const response = await api.post('/auth/register', userData);\n\n      // Handle successful registration\n      if (response.data && response.data.success) {\n        const {\n          accessToken,\n          refreshToken,\n          user\n        } = response.data.data;\n\n        // Store tokens and user data\n        if (accessToken && refreshToken) {\n          localStorage.setItem('token', accessToken);\n          localStorage.setItem('refreshToken', refreshToken);\n          if (user) {\n            localStorage.setItem('user', JSON.stringify(user));\n          }\n        }\n\n        // Update axios default headers for subsequent requests\n        api.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n        return {\n          success: true,\n          message: 'Registration successful',\n          data: response.data.data\n        };\n      } else {\n        return {\n          success: false,\n          message: response.data.message || 'Registration failed'\n        };\n      }\n    } catch (error) {\n      if (error.response) {\n        var _error$response$data2, _error$response$data3;\n        // Server responded with error\n        const errorMessage = ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || ((_error$response$data3 = error.response.data) === null || _error$response$data3 === void 0 ? void 0 : _error$response$data3.error) || 'Registration failed';\n        return {\n          success: false,\n          message: errorMessage\n        };\n      } else if (error.request) {\n        // No response received\n        return {\n          success: false,\n          message: 'No response from server. Please check your internet connection.'\n        };\n      } else {\n        // Request setup error\n        return {\n          success: false,\n          message: 'Error setting up the request. Please try again.'\n        };\n      }\n    }\n  },\n  // Login user\n  login: async credentials => {\n    try {\n      const response = await api.post('/auth/login', credentials);\n      if (response.data && response.data.success) {\n        const {\n          accessToken,\n          refreshToken,\n          user\n        } = response.data.data;\n        // Store tokens and user data\n        if (accessToken && refreshToken) {\n          localStorage.setItem('token', accessToken);\n          localStorage.setItem('refreshToken', refreshToken);\n          if (user) {\n            localStorage.setItem('user', JSON.stringify(user));\n          }\n        }\n        // Update axios default headers\n        api.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n        return {\n          success: true,\n          message: 'Login successful',\n          data: response.data.data\n        };\n      }\n      return {\n        success: false,\n        message: response.data.message || 'Login failed'\n      };\n    } catch (error) {\n      var _error$response3;\n      if ((_error$response3 = error.response) !== null && _error$response3 !== void 0 && _error$response3.data) {\n        return {\n          success: false,\n          message: error.response.data.message || 'Login failed',\n          error: error.response.data\n        };\n      } else if (error.request) {\n        return {\n          success: false,\n          message: 'No response from server. Please try again.'\n        };\n      } else {\n        return {\n          success: false,\n          message: 'Something went wrong. Please try again.'\n        };\n      }\n    }\n  },\n  // Logout user\n  logout: async () => {\n    try {\n      await api.post('/auth/logout');\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n    } catch (error) {\n      var _error$response4;\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message;\n    }\n  },\n  // Get current user\n  getCurrentUser: async () => {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message;\n    }\n  },\n  // Check if user is authenticated\n  isAuthenticated: () => {\n    return !!localStorage.getItem('token');\n  }\n};\nexport default authService;","map":{"version":3,"names":["api","authService","getUserType","stored","localStorage","getItem","user","JSON","parse","role","e","isOwner","getCurrentUser","response","get","success","data","error","_error$response","_error$response$data","message","updateProfile","userData","put","_error$response2","_error$response2$data","register","post","accessToken","refreshToken","setItem","stringify","defaults","headers","common","_error$response$data2","_error$response$data3","errorMessage","request","login","credentials","_error$response3","logout","removeItem","_error$response4","_error$response5","isAuthenticated"],"sources":["/Users/avarn/Desktop/HomiGo project/frontend/src/services/authService.js"],"sourcesContent":["\nimport api from './api';\n\nconst authService = {\n  // Utility: get current user type (role)\n  getUserType: () => {\n    try {\n      const stored = localStorage.getItem('user');\n      if (stored) {\n        const user = JSON.parse(stored);\n        return user.role || null;\n      }\n    } catch (e) {}\n    return null;\n  },\n  // Utility: check if current user is owner\n  isOwner: () => {\n    try {\n      const stored = localStorage.getItem('user');\n      if (stored) {\n        const user = JSON.parse(stored);\n        return user.role === 'owner';\n      }\n    } catch (e) {}\n    return false;\n  },\n  getCurrentUser: async () => {\n    try {\n      const response = await api.get('/auth/me');\n      return {\n        success: true,\n        data: response.data.data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Failed to fetch user data'\n      };\n    }\n  },\n\n  updateProfile: async (userData) => {\n    try {\n      const response = await api.put('/users/profile', userData);\n      return {\n        success: true,\n        data: response.data.data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Failed to update profile'\n      };\n    }\n  },\n  // Register a new user\n  register: async (userData) => {\n    try {\n      const response = await api.post('/auth/register', userData);\n      \n      // Handle successful registration\n      if (response.data && response.data.success) {\n        const { accessToken, refreshToken, user } = response.data.data;\n        \n        // Store tokens and user data\n        if (accessToken && refreshToken) {\n          localStorage.setItem('token', accessToken);\n          localStorage.setItem('refreshToken', refreshToken);\n          if (user) {\n            localStorage.setItem('user', JSON.stringify(user));\n          }\n        }\n\n        // Update axios default headers for subsequent requests\n        api.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n        \n        return {\n          success: true,\n          message: 'Registration successful',\n          data: response.data.data\n        };\n      } else {\n        return {\n          success: false,\n          message: response.data.message || 'Registration failed'\n        };\n      }\n    } catch (error) {\n      if (error.response) {\n        // Server responded with error\n        const errorMessage = error.response.data?.message || \n                           error.response.data?.error || \n                           'Registration failed';\n        return {\n          success: false,\n          message: errorMessage\n        };\n      } else if (error.request) {\n        // No response received\n        return {\n          success: false,\n          message: 'No response from server. Please check your internet connection.'\n        };\n      } else {\n        // Request setup error\n        return {\n          success: false,\n          message: 'Error setting up the request. Please try again.'\n        };\n      }\n    }\n  },\n\n  // Login user\n  login: async (credentials) => {\n    try {\n      const response = await api.post('/auth/login', credentials);\n      \n      if (response.data && response.data.success) {\n        const { accessToken, refreshToken, user } = response.data.data;\n        // Store tokens and user data\n        if (accessToken && refreshToken) {\n          localStorage.setItem('token', accessToken);\n          localStorage.setItem('refreshToken', refreshToken);\n          if (user) {\n            localStorage.setItem('user', JSON.stringify(user));\n          }\n        }\n        // Update axios default headers\n        api.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n        \n        return {\n          success: true,\n          message: 'Login successful',\n          data: response.data.data\n        };\n      }\n      \n      return {\n        success: false,\n        message: response.data.message || 'Login failed'\n      };\n    } catch (error) {\n      if (error.response?.data) {\n        return {\n          success: false,\n          message: error.response.data.message || 'Login failed',\n          error: error.response.data\n        };\n      } else if (error.request) {\n        return {\n          success: false,\n          message: 'No response from server. Please try again.'\n        };\n      } else {\n        return {\n          success: false,\n          message: 'Something went wrong. Please try again.'\n        };\n      }\n    }\n  },\n\n  // Logout user\n  logout: async () => {\n    try {\n      await api.post('/auth/logout');\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  // Get current user\n  getCurrentUser: async () => {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  },\n\n  // Check if user is authenticated\n  isAuthenticated: () => {\n    return !!localStorage.getItem('token');\n  }\n};\n\nexport default authService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}